import java.io.*;
import java.util.Arrays;
import java.util.Scanner;

public class labbbb {

   
    static Float[][] setosa = new Float[4][50];
    static Float[][] versicolor = new Float[4][50];
    static Float[][] virginica = new Float[4][50];
    static Scanner scan = new Scanner(System.in);
    static Float[] sepLen = new Float[150];
    static Float[] sepWid = new Float[150];
    static Float[] petLen = new Float[150];
    static Float[] petWid = new Float[150];

    public static void main(String[] args) {
        readfile();
        int choice;
        do {
            System.out.println("1 for Sepel Length \n" + " 2 for Sepel Width \n" + "3 for Petal Length \n" + "4 for Petal Width \n" + "5 for Iris Setosa \n" +"6 for Iris Versicolor \n" + "7 for Iris virginica \n" + "0 to exit");
           
            System.out.print("Choice of user: ");
            choice = Integer.parseInt(scan.nextLine());

            switch (choice) {
                case 1:
                    System.out.println("For Sepal Length "+ "\n Mean: "+mean(sepLen)+"\n Median: "+median(sepLen) + "\n Mode: " +mode(sepLen)[0]+ "\n Minimum Value:" +min(sepLen)+ "\n Maximum value:" +  max(sepLen));
                    System.out.println();
                    break;
                case 2:
                    System.out.println("For Sepal Width");
                    System.out.println("For Sepal Length "+ "\n Mean: "+mean(sepWid)+"\n Median: "+median(sepWid) + "\n Mode: " +mode(sepWid)[0]+ "\n Minimum Value:" +min(sepWid)+ "\n Maximum value:" +  max(sepWid));
                    System.out.println();
                    break;
                case 3:
                    System.out.println("For Petal Length");
                    System.out.println("For Sepal Length "+ "\n Mean: "+mean(sepLen)+"\n Median: "+median(petLen) + "\n Mode: " +mode(petLen)[0]+ "\n Minimum Value:" +min(petLen)+ "\n Maximum value:" +  max(petLen));
                    System.out.println();
                    break;
                case 4:
                    System.out.println("For Petal Width");
                    System.out.println("For Sepal Length "+ "\n Mean: "+mean(petWid)+"\n Median: "+median(petWid) + "\n Mode: " +mode(petWid)[0]+ "\n Minimum Value:" +min(petWid)+ "\n Maximum value:" +  max(petWid));
                    System.out.println();
                    break;
                case 5:
                    selectspec("Setosa");
                    break;
                case 6:
                    selectspec("Versicolor");
                    break;
                case 7:
                    selectspec("virginica");
                    break;
                case 0:
                    break;
                default:
                    System.out.println("Invalid Input");

            }

        } while (choice != 0);

    }

    public static void selectspec(String spec) {
        int choice;
        do {
            System.out.println("Press 1 for Sepel Length for " + spec +"\n Press 2 for Sepel Width for " +spec +"\n Press 3 for Petal Length" +spec +"\n Press 4 for Petal Width" +spec +"Press 0 to go back");
            System.out.println("Press 0 to go back");
            System.out.println("Choice: ");
            choice = Integer.parseInt(scan.nextLine());

            Float[][] spec2 = new Float[4][50];
            
            switch(spec){
                case "Setosa":
                spec2 = setosa;
                break;
                case "Versicolor":
                spec2 = versicolor;
                break;
                case "virginica":
                spec2 = virginica;
                break;
            }

            

            switch (choice) {
                case 1:
                    System.out.println("Sepal Length");
                    System.out.println("Mean: " + mean(spec2[0]) +"\n Median: " +median(spec2[0])+"\n Mode: " +mode(spec2[0])[0]+"\n Minimum Value: "+min(spec2[0])+"\n Maximum value:" +max(spec2[0]));
                    System.out.println();
                    break;
                case 2:
                    System.out.println("Sepal Width");
                    System.out.println("Mean: " + mean(spec2[1]) +"\n Median: " +median(spec2[1])+"\n Mode: " +mode(spec2[1])[0]+"\n Minimum Value: "+min(spec2[1])+"\n Maximum value:" +max(spec2[1]));
                    System.out.println();
                    break;
                case 3:
                    System.out.println("Petal Length");
                    System.out.println("Mean: " + mean(spec2[2]) +"\n Median: " +median(spec2[2])+"\n Mode: " +mode(spec2[2])[0]+"\n Minimum Value: "+min(spec2[2])+"\n Maximum value:" +max(spec2[2]));
                    System.out.println();
                    break;
                case 4:
                    System.out.println("Petal Width");
                    System.out.println("Mean: " + mean(spec2[3]) +"\n Median: " +median(spec2[3])+"\n Mode: " +mode(spec2[3])[0]+"\n Minimum Value: "+min(spec2[3])+"\n Maximum value:" +max(spec2[3]));
                    System.out.println();
                    break;
                case 0:
                    break;
                default:
                    System.out.println("Invalid Choice");
            }
        } while (choice != 0);
    }

    public static void readfile() {

        try {
            String path = "C:\\Users\\HP\\22122042-MDS273L-JAVA\\LAB7\\Iris.csv";
            File file = new File(path);
            if (file.exists()) {
                Scanner scan = new Scanner(file);
                if (file.canRead()) {
                    int i = 0;
                    scan.nextLine();
                    int s = 0;
                    int v = 0;
                    int v1 = 0;
                    while (scan.hasNextLine()) {
                        String[] row = scan.nextLine().split(",");
                        sepLen[i] = Float.parseFloat(row[1]);
                        sepWid[i] = Float.parseFloat(row[2]);
                        petLen[i] = Float.parseFloat(row[3]);
                        petWid[i] = Float.parseFloat(row[4]);

                        switch(row[5]){
                            case "Iris-setosa":
                            setosa[0][s] = Float.parseFloat(row[1]);
                            setosa[1][s] = Float.parseFloat(row[2]);
                            setosa[2][s] = Float.parseFloat(row[3]);
                            setosa[3][s] = Float.parseFloat(row[4]);
                            s++;
                            break;
                            case "Iris-versicolor":
                            versicolor[0][v] = Float.parseFloat(row[1]);
                            versicolor[1][v] = Float.parseFloat(row[2]);
                            versicolor[2][v] = Float.parseFloat(row[3]);
                            versicolor[3][v] = Float.parseFloat(row[4]);
                            v++;
                            break;
                            case "Iris-virginica":
                            virginica[0][v1] = Float.parseFloat(row[1]);
                            virginica[1][v1] = Float.parseFloat(row[2]);
                            virginica[2][v1] = Float.parseFloat(row[3]);
                            virginica[3][v1] = Float.parseFloat(row[4]);
                            v1++;
                            break;


                        }

                       

                        i++;
                    }
                }
                scan.close();
            }

        } catch (Exception e) {
            System.out.println(e.getMessage());
        }

    }

    static Float mean(Float[] arr) {
        Float sum = 0.0f;
        for (Float x : arr) {
            sum += x;
        }

        Float mean = sum / arr.length;
        System.out.println(mean);
        return mean;
    }

    static Float median(Float[] arr) {
        Arrays.sort(arr);
        Float median = 0.0f;
        int len = arr.length;
        if (len % 2 == 1) {
            median = arr[((len + 1) / 2) - 1];
        } else {
            median = (arr[len / 2 - 1] + arr[len / 2]) / 2;
        }
        return median;
    }

    private static Float intCount(Float[] arr, Float val) {
        Float count = 1.0f;
        for (Float x : arr) {
            if (x.equals(val)) {
                count += 1.0f;
            }
        }
        return count;
    }

    static String[] mode(Float[] intArr) {
        Float val = 0.0f;
        String[] intFreq = new String[2];
        for (Float x : intArr) {
            float con = intCount(intArr, x);
            if (con > val) {
                val = con;

                intFreq[0] = Float.toString(x);

                intFreq[1] = Integer.toString((int) con);

            }

        }
        return intFreq;
    }

    static Float min(Float[] arr) {
        Float min = max(arr);
        for (Float x : arr) {
            if (x < min) {
                min = x;
            }
        }
        return min;
    }

    private static Float max(Float[] arr) {
        Float max = 0.0f;
        for (Float x : arr) {
            if (x > max) {
                max = x;
            }
        }
        return max;
    }

    static void specSplit() {

    }

}
